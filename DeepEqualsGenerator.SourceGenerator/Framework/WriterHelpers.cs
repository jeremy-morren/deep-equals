using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace DeepEqualsGenerator.SourceGenerator.Framework;

internal static class WriterHelpers
{
    public static void WriteFileHeader(this IndentedWriter writer, string nullable)
    {
        writer.WriteLine("// <auto-generated/>");
        writer.WriteLine("// This file was automatically generated by the DeepEquals source generator.");
        writer.WriteLine("// Do not edit this file manually since it will be automatically overwritten.");
        writer.WriteLine("// ReSharper disable All");
        writer.WriteLine($"#nullable {nullable}");
    }
    
    public static void WriteClassAttributes(this IndentedWriter writer, EditorBrowsableState browsableState = EditorBrowsableState.Never)
    {
        writer.WriteLine($"[global::{typeof(GeneratedCodeAttribute).FullName}(\"DeepEquals\", \"{Version}\")]");
        writer.WriteLine($"[global::{typeof(DebuggerStepThroughAttribute).FullName}()]");
        writer.WriteLine($"[global::{typeof(DebuggerNonUserCodeAttribute).FullName}()]");
        writer.WriteLine($"[global::{typeof(ExcludeFromCodeCoverageAttribute).FullName}()]");
        writer.WriteLine($"[global::{typeof(EditorBrowsableAttribute).FullName}(global::{typeof(EditorBrowsableState).FullName}.{browsableState})]");
    }

    private static Version Version => typeof(WriterHelpers).Assembly.GetName().Version;
    
    public static void WriteStatement(this IndentedWriter writer, string header, Action writeContent)
    {
        writer.WriteLine(header);
        writer.WriteLineThenPush('{');
        writeContent();
        writer.PopThenWriteLine('}');
    }

    public static void WriteStatement(this IndentedWriter writer, string header, string content)
    {
        writer.WriteLine(header);
        writer.WriteLineThenPush('{');
        writer.WriteLine(content);
        writer.PopThenWriteLine('}');
    }

    public static void WriteParameters(this IndentedWriter writer, IEnumerable<string> parameters)
    {
        writer.Push();
        writer.WriteRawLine(string.Join($", {writer.Indent}", parameters));
        writer.WriteRawLine(')');
        writer.Pop();
    }

    public static void PopAll(this IndentedWriter writer)
    {
        while (writer.CurrentIndentLevel > 0)
            writer.PopThenWriteLine('}');
    }
}